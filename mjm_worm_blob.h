#ifndef MJM_WORM_BLOB_H__
#define MJM_WORM_BLOB_H__

#include "mjm_globals.h"
#include "mjm_thread_util.h"

#include <map> 
#include <vector> 
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <string>
#include <fstream>
#include <signal.h>
#include <stdlib.h>
#include <stdint.h>

/*
@software{,
  author = {Michael J Marchywka},
  title = {},
abstract=(),
institution={},
license={Knowledge sir should be free to all },
publisher={Mike Marchywka},
email={marchywka@hotmail.com},
authorid={orcid.org/0000-0001-9237-455X},
  filename = {},
  url = {},
  version = {0.0.0},
  date-started = {}
}
*/

// Tue 06 Jun 2023 06:56:44 PM EDT
// generated by /home/documents/cpp/scripts/cpputil -classhdr mjm_worm_blob   
// g++  -Wall -std=gnu++11 -DTEST_MJM_WORM_BLOB -I. -I../../mjm/hlib -I../../mjm/num  -gdwarf-3 -O0  -x c++ mjm_worm_blob.h  -o mjm_worm_blob.out -lpthread -lreadline

mjm_global_credits::credit __credit__mjm_worm_blob("mjm_worm_blob" , "  ");

template <class Tr, class Td=double>
class mjm_worm_blob 
{
 typedef mjm_worm_blob Myt;
typedef Td Data;
 typedef typename Tr::IdxTy IdxTy;
 typedef typename Tr::D D;
 typedef typename Tr::StrTy StrTy;
 typedef typename Tr::Ss Ss;
 typedef typename Tr::IsTy IsTy;
 typedef typename Tr::OsTy OsTy;
 typedef typename Tr::Ofs Ofs;
//typedef typename Tr::FlagTy; 
// typedef typename Tr::MyBlock  MyBlock;
typedef std::map<StrTy, StrTy> Index;
// API

public:
enum {SZDATA=sizeof(Data), BAD=~0};
mjm_worm_blob() {Init();}
~mjm_worm_blob() {delete [] m_p; }
IdxTy size() const  { return m_pc; }
IdxTy capacity() const { return m_sz;} 
void capacity(const IdxTy n) { Alloc(n+m_pad);} 
IdxTy pitch() const { return m_pitch;} 
void pitch(const IdxTy n) { m_pitch=n;} 
const void * ep(const IdxTy & n) const { return m_p+m_pitch*n; } 
void clear() { delete[] m_p; Init(); } 
void reset() { m_pc=0; } 
const Data & operator[]( const IdxTy n) const { return m_p[n]; } 
void push_back(const Data & m) {if ((m_pc+m_pad)>(m_sz)) Alloc(m_sz+m_block+m_pad);   m_p[m_pc]=m; ++m_pc; } 
void index(const StrTy & nm) { Ss ss; ss<<m_pc;  m_idx[nm]=ss.str(); } 
IdxTy base(const StrTy &nm) const { const auto ii =m_idx.find(nm);
if (ii==m_idx.end()) return BAD; return atoi((*ii).c_str()); } 
StrTy property(const StrTy &nm) const { const auto ii =m_idx.find(nm);
if (ii==m_idx.end()) return StrTy(); return ((*ii)); } 
void set(const StrTy &k, const StrTy & v) { m_idx[k]=v; } 
StrTy dump(const IdxTy flags=0) { return Dump(flags); }
private:
mjm_worm_blob( const Myt & ) {}
Myt & operator=(const Myt & ) { return *this; } 

bool Bit(const IdxTy f, const IdxTy b) const  { return  ((f>>b)&1)!=0; }
// should loop over map now 
StrTy Dump(const IdxTy flags=0) {Ss ss;  return ss.str(); }
typedef typename mjm_thread_util<Tr>::mutex_vector MutexVector;
void Alloc(const IdxTy sz)
{
if ((sz<m_sz)||(sz<=m_pc))
MM_ERR(" bad request fr space "<<MMPR3(sz,m_sz,m_pc))
Data * p=new Data[sz];
if (m_p){  memcpy(p,m_p,m_pc*SZDATA); delete [] m_p; }
m_p=p;
m_sz=sz;
} // Alloc 
enum { MAP_MU=0 , MU_SZ};
mutable MutexVector m_mutex_vector;
void EnterSerial(const IdxTy i)const  {  m_mutex_vector.enter_serial(i ); }
void ExitSerial(const IdxTy i)const  {  m_mutex_vector.exit_serial(i ); }
//m_mutex_vector = MutexVector(MU_SZ);
void Init()
{
m_p=0;
m_pc=0; 
m_pad=(1<<16);
m_pitch=1;
m_block=(1<<16);
m_sz=0;
}

// MEMBERS
Data * m_p;
Index m_idx;
IdxTy m_pc;
IdxTy m_sz,m_block,m_pad,m_pitch;
}; // mjm_worm_blob

//////////////////////////////////////////////

template <class Tr,class Td >
class mjm_worm_blob_map : public std::map<typename Tr::StrTy, mjm_worm_blob< Tr, Td  > >  
{
 typedef mjm_worm_blob_map Myt;
typedef typename std::map<typename Tr::StrTy, mjm_worm_blob< Tr> >   Super;
 typedef typename Tr::IdxTy IdxTy;
 typedef typename Tr::D D;
 typedef typename Tr::StrTy StrTy;
 typedef typename Tr::Ss Ss;
 typedef typename Tr::IsTy IsTy;
 typedef typename Tr::OsTy OsTy;
 typedef typename Tr::Ofs Ofs;
//typedef typename Tr::FlagTy; 
// typedef typename Tr::MyBlock  MyBlock;
public:
mjm_worm_blob_map() {}
StrTy dump(const IdxTy flags=0) { return Dump(flags); }
private:
bool Bit(const IdxTy f, const IdxTy b) const  { return  ((f>>b)&1)!=0; }
// should loop over map now 
//StrTy Dump(const IdxTy flags=0) {Ss ss;  return ss.str(); }
typedef typename mjm_thread_util<Tr>::mutex_vector MutexVector;

enum { MAP_MU=0 , MU_SZ};
mutable MutexVector m_mutex_vector;
void EnterSerial(const IdxTy i)const  {  m_mutex_vector.enter_serial(i ); }
void ExitSerial(const IdxTy i)const  {  m_mutex_vector.exit_serial(i ); }
//m_mutex_vector = MutexVector(MU_SZ);


//StrTy dump(const IdxTy flags=0) { return Dump(flags); }

private:

void Init()
{
}

StrTy Dump(const IdxTy flags=0)
{
Ss ss;
MM_LOOP(ii,(*this))
{
ss<<(*ii).first<<CRLF;
ss<<(*ii).second.dump()<<CRLF;


}
return ss.str();
// return Dump(flags); 

}




private:

}; // mjm_worm_blob_map




////////////////////////////////////////////
#ifdef  TEST_MJM_WORM_BLOB
class Tr {
public:
// typedef mjm_string_picker Myt;
 typedef unsigned int IdxTy;
 typedef double  D;
 typedef std::string StrTy;
 typedef std::stringstream Ss;
 typedef std::istream  IsTy;
 typedef std::ostream  OsTy;
 typedef std::ofstream  Ofs;
// typedef typename Tr::MyBlock  MyBlock;
}; // 


#include "mjm_instruments.h"
#include "mjm_cli_ui.h"
typedef Tr::StrTy StrTy;
typedef Tr::IdxTy IdxTy;

template <class Tt> class tester_ {
typedef tester_<Tt> Myt;
typedef mjm_cli_ui<Myt> Cli;
//typedef tester Myt;
//typedef mjm_cli_ui<Myt> Cli;
typedef std::map<StrTy, StrTy> LocalVar;

typedef CommandInterpretterParam Cip ;
typedef void (Myt:: * CmdFunc)(Cip &, LocalVar &  ) ;
typedef std::map<StrTy, CmdFunc> CmdMap;
typedef std::vector<StrTy> Choices;
//typedef void (Myt:: * CompleteFunc) ( Cli::list_type & choices,  const char * cmd, const char * frag);
typedef void (Myt:: * CompleteFunc) ( Choices & choices,  const char * cmd, const char * frag);
typedef std::map<StrTy, CompleteFunc> CompMap;

public:
 //void cli_cmd( Cli::list_type & choices,  const char * frag)
 void cli_cmd( Choices & choices,  const char * frag)
{
const IdxTy nfrag=strlen(frag);
MM_LOOP(ii,m_cmd_map)
{
const StrTy & v=(*ii).first;
if (strncmp(v.c_str(),frag,nfrag)==0)  choices.push_back(v);
}
}

 //void cli_param( Cli::list_type & choices,  const char * _cmd, const char * frag)
 void cli_param( Choices & choices,  const char * _cmd, const char * frag)
{
MM_ERR("cli_param"<<MMPR2(_cmd,frag))
//const StrTy cmd=CliTy::word(StrTy(_cmd),0);
//auto ii=m_comp_map.find(cmd);
//if ( ii!=m_comp_map.end()) ((this)->*(*ii).second)(choices,cmd.c_str(),frag);
}

CmdMap m_cmd_map;


 }; // tester_
typedef tester_< mjm_worm_blob <Tr>  > tester;

typedef mjm_cli_ui<tester> Cli;


typedef Tr::Ss Ss;
void about()
{
Ss ss;
ss<<" MJM_WORM_BLOB "<<__DATE__<<" "<<__TIME__<<CRLF;
MM_ERR(ss.str())

}

int main(int argc,char **args)
{
about();
typedef mjm_worm_blob<Tr>  Myt;
//Myt x(argc,args);
Myt x;

//if (!x.done()) x.command_mode();
Cli cli;
tester tester;
CommandInterpretter li(&std::cin);
li.push(args,argc);
cli.set_target(tester);
cli.set_command_handler(&tester::cli_cmd);
cli.set_param_handler(&tester::cli_param);
cli.activate();
li.set_split(1,' ');
while (li.nextok())
{
const IdxTy sz=li.size();
if (sz<1) continue;
const StrTy cmd=li.word(0);
if (cmd=="") continue;
if (cmd=="about"){ about();  continue; } 
CommandInterpretterParam  cip(li);

if (cmd=="quit") break;
if (cmd=="dump") { MM_ERR(x.dump()) }
//else if (cmd=="load") { x.load(li.words(),1); }
//else if (cmd=="clear") { x.clear(); }

} // nextok

//if (!x.done()) x.command_mode();
return 0;
}

#endif // main

#endif // MJM_WORM_BLOB_H__ 
