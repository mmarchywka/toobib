#ifndef MJM_INDEXED_MAP_H__
#define MJM_INDEXED_MAP_H__

#include "mjm_globals.h"
#include "mjm_thread_util.h"

#include <map> 
#include <vector> 
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <string>
#include <fstream>
#include <signal.h>
#include <stdlib.h>
#include <stdint.h>


// Tue Sep  1 09:24:40 EDT 2020
// generated by /home/documents/cpp/scripts/cpputil -classhdr mjm_indexed_map   
// g++ -std=gnu++11 -DTEST_MJM_INDEXED_MAP -I. -I../../mjm/hlib -I../../mjm/num  -gdwarf-3 -O0  -x c++ mjm_indexed_map.h  -lpthread -lreadline

template <class Tr, class Tt>
class mjm_indexed_map 
{
 typedef mjm_indexed_map Myt;
typedef Tt TgtTy;
 typedef typename Tr::IdxTy IdxTy;
 typedef typename Tr::D D;
 typedef typename Tr::StrTy StrTy;
 typedef typename Tr::Ss Ss;
 typedef typename Tr::IsTy IsTy;
 typedef typename Tr::OsTy OsTy;
 typedef typename Tr::Ofs Ofs;
//typedef typename Tr::FlagTy; 
// typedef typename Tr::MyBlock  MyBlock;
typedef typename std::vector<TgtTy> TgtVector;
typedef std::map<StrTy, IdxTy> TgtIdx;
class my_itor
{
public:
typedef typename TgtIdx::iterator Itor;
typedef std::pair<StrTy,TgtTy &> Deref;
my_itor() {}
my_itor(TgtVector & v, TgtIdx & idx,const bool b)
{
m_v=&v; m_idx=&idx;
ii=b?m_idx->begin():m_idx->end();
}
my_itor & operator++() { ++ii;  return *this;} 
bool operator==(const my_itor & that ) const { return (ii==that.ii); } 
bool operator!=(const my_itor & that ) const { return (ii!=that.ii); } 
Deref  operator*() const { return Deref((*ii).first, (*m_v)[(*ii).second]); }
TgtVector *  m_v;
TgtIdx * m_idx;
Itor ii;
};

public:
mjm_indexed_map() {}
~mjm_indexed_map() {}
const IdxTy size() const { return m_vec.size(); } 
void clear() { m_vec.clear(); m_idx.clear(); } 
StrTy dump(const IdxTy flags=0) { return Dump(flags); }
my_itor begin() { return my_itor(m_vec,m_idx,true); }
my_itor end() { return my_itor(m_vec,m_idx,false); }
TgtTy * operator[](const StrTy & key) { return Find(key); } 
const TgtTy * operator[](const StrTy & key)const  { return Find(key); } 
bool  add(const StrTy & key, const TgtTy & t) {return Add(key,t); } 
template<class Tk > bool  add_multi(const Tk & keys, const TgtTy & t) 
{return AddMulti(keys,t); } 
template<class Tk > bool  add_multi(const StrTy & name, const Tk & keys, const TgtTy & t) 
{return AddMulti(name,keys,t); } 



private:
bool Bit(const IdxTy f, const IdxTy b) const  { return  ((f>>b)&1)!=0; }
// should loop over map now 
StrTy Dump(const IdxTy flags=0) {Ss ss;  
MM_LOOP(ii,m_idx)
{
ss<<(*ii).first<<" "<<(*ii).second<<" "<<m_vec[(*ii).second].dump()<<CRLF;

}
return ss.str(); }
typedef typename mjm_thread_util<Tr>::mutex_vector MutexVector;

enum { MAP_MU=0 , MU_SZ};
mutable MutexVector m_mutex_vector;
void EnterSerial(const IdxTy i)const  {  m_mutex_vector.enter_serial(i ); }
void ExitSerial(const IdxTy i)const  {  m_mutex_vector.exit_serial(i ); }
//m_mutex_vector = MutexVector(MU_SZ);
const TgtTy * Find(const StrTy & key) const  { 
auto ii= m_idx.find(key);
if (ii==m_idx.end()) return 0;
return & m_vec[(*ii).second];
} 
TgtTy * Find(const StrTy & key)  { 
auto ii= m_idx.find(key);
if (ii==m_idx.end()) return 0;
return & m_vec[(*ii).second];
} 


bool  Add(const StrTy & key, const TgtTy & t) {
auto ii=m_idx.find(key);
const bool uniq= (ii==m_idx.end());
if (!uniq) { MM_ERR(" non unique key "<<MMPR(key)) } 
m_idx[key]=m_vec.size(); 
m_vec.push_back(t);
//Add(key,t);
return uniq;
 } 
template<class Tk > bool  AddMulti(const Tk & keys, const TgtTy & t) 
{
bool uniq=true;
const IdxTy sz=m_vec.size();
MM_LOOP(ii,keys) 
{ 
const StrTy & key=(*ii); 
auto jj=m_idx.find(key);
if (jj!=m_idx.end()){ uniq=false;  MM_ERR(" non unique key "<<MMPR(key)) } 
m_idx[key]=sz; 

} // ii 

m_vec.push_back(t);
return uniq;

}

template<class Tk > bool  AddMulti(const StrTy & name, const Tk & keys, const TgtTy & t) 
{
bool uniq=true;
const IdxTy sz=m_vec.size();
MM_LOOP(ii,keys) 
{ 
const StrTy & key=(*ii).first; 
auto jj=m_idx.find(key);
if (jj!=m_idx.end()){ uniq=false;  MM_ERR(" non unique key "<<MMPR(key)) } 
m_idx[key]=sz; 

} // ii 
const bool u2= Add(name,t);
return u2||uniq; 
//m_vec.push_back(t);

}



// members
TgtVector m_vec;
TgtIdx m_idx;

}; // mjm_indexed_map

//////////////////////////////////////////////
#if 0 
template <class Tr>
class mjm_indexed_map_map : public std::map<typename Tr::StrTy, mjm_indexed_map< Tr > >  
{
 typedef mjm_indexed_map_map Myt;
typedef typename std::map<typename Tr::StrTy, mjm_indexed_map< Tr> >   Super;
 typedef typename Tr::IdxTy IdxTy;
 typedef typename Tr::D D;
 typedef typename Tr::StrTy StrTy;
 typedef typename Tr::Ss Ss;
 typedef typename Tr::IsTy IsTy;
 typedef typename Tr::OsTy OsTy;
 typedef typename Tr::Ofs Ofs;
//typedef typename Tr::FlagTy; 
// typedef typename Tr::MyBlock  MyBlock;
public:
mjm_indexed_map_map() {}
StrTy dump(const IdxTy flags=0) { return Dump(flags); }
private:
bool Bit(const IdxTy f, const IdxTy b) const  { return  ((f>>b)&1)!=0; }
// should loop over map now 
//StrTy Dump(const IdxTy flags=0) {Ss ss;  return ss.str(); }
typedef typename mjm_thread_util<Tr>::mutex_vector MutexVector;

enum { MAP_MU=0 , MU_SZ};
mutable MutexVector m_mutex_vector;
void EnterSerial(const IdxTy i)const  {  m_mutex_vector.enter_serial(i ); }
void ExitSerial(const IdxTy i)const  {  m_mutex_vector.exit_serial(i ); }
//m_mutex_vector = MutexVector(MU_SZ);


//StrTy dump(const IdxTy flags=0) { return Dump(flags); }

private:

void Init()
{
}

StrTy Dump(const IdxTy flags=0)
{
Ss ss;
MM_LOOP(ii,(*this))
{
ss<<(*ii).first<<CRLF;
ss<<(*ii).second.dump()<<CRLF;


}
return ss.str();
// return Dump(flags); 

}




private:

}; // mjm_indexed_map_map
#endif




////////////////////////////////////////////
#ifdef  TEST_MJM_INDEXED_MAP
class Tr {
public:
// typedef mjm_string_picker Myt;
 typedef unsigned int IdxTy;
 typedef double  D;
 typedef std::string StrTy;
 typedef std::stringstream Ss;
 typedef std::istream  IsTy;
 typedef std::ostream  OsTy;
 typedef std::ofstream  Ofs;
// typedef typename Tr::MyBlock  MyBlock;
}; // 


#include "mjm_instruments.h"
#include "mjm_cli_ui.h"
typedef Tr::StrTy StrTy;
typedef Tr::IdxTy IdxTy;

template <class Tt> class tester_ {
typedef tester_<Tt> Myt;
typedef mjm_cli_ui<Myt> Cli;
//typedef tester Myt;
//typedef mjm_cli_ui<Myt> Cli;
typedef std::map<StrTy, StrTy> LocalVar;

typedef CommandInterpretterParam Cip ;
typedef void (Myt:: * CmdFunc)(Cip &, LocalVar &  ) ;
typedef std::map<StrTy, CmdFunc> CmdMap;
typedef std::vector<StrTy> Choices;
//typedef void (Myt:: * CompleteFunc) ( Cli::list_type & choices,  const char * cmd, const char * frag);
typedef void (Myt:: * CompleteFunc) ( Choices & choices,  const char * cmd, const char * frag);
typedef std::map<StrTy, CompleteFunc> CompMap;

public:
 //void cli_cmd( Cli::list_type & choices,  const char * frag)
 void cli_cmd( Choices & choices,  const char * frag)
{
const IdxTy nfrag=strlen(frag);
MM_LOOP(ii,m_cmd_map)
{
const StrTy & v=(*ii).first;
if (strncmp(v.c_str(),frag,nfrag)==0)  choices.push_back(v);
}
}

 //void cli_param( Cli::list_type & choices,  const char * _cmd, const char * frag)
 void cli_param( Choices & choices,  const char * _cmd, const char * frag)
{
MM_ERR("cli_param"<<MMPR2(_cmd,frag))
//const StrTy cmd=CliTy::word(StrTy(_cmd),0);
//auto ii=m_comp_map.find(cmd);
//if ( ii!=m_comp_map.end()) ((this)->*(*ii).second)(choices,cmd.c_str(),frag);
}

CmdMap m_cmd_map;


 }; // tester_
typedef tester_< mjm_indexed_map <Tr, StrTy>  > tester;

typedef mjm_cli_ui<tester> Cli;


typedef Tr::Ss Ss;
void about()
{
Ss ss;
ss<<" MJM_INDEXED_MAP "<<__DATE__<<" "<<__TIME__<<CRLF;
MM_ERR(ss.str())

}

int main(int argc,char **args)
{
about();
typedef mjm_indexed_map<Tr,StrTy >  Myt;
//Myt x(argc,args);
Myt x;

//if (!x.done()) x.command_mode();
Cli cli;
tester tester;
CommandInterpretter li(&std::cin);
li.push(args,argc);
cli.set_target(tester);
cli.set_command_handler(&tester::cli_cmd);
cli.set_param_handler(&tester::cli_param);
cli.activate();
li.set_split(1,' ');
while (li.nextok())
{
const IdxTy sz=li.size();
if (sz<1) continue;
const StrTy cmd=li.word(0);
if (cmd=="") continue;
if (cmd=="about"){ about();  continue; } 
CommandInterpretterParam  cip(li);

if (cmd=="quit") break;
if (cmd=="dump") { MM_ERR(x.dump()) }
//else if (cmd=="load") { x.load(li.words(),1); }
//else if (cmd=="clear") { x.clear(); }

} // nextok

//if (!x.done()) x.command_mode();
return 0;
}

#endif // main

#endif // MJM_INDEXED_MAP_H__ 
