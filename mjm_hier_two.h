#ifndef MJM_HIER_TWO_H__
#define MJM_HIER_TWO_H__

#include "mjm_globals.h"
#include "mjm_thread_util.h"

#include "mjm_collections.h"
#include "mjm_pawnoff.h"



#include <map> 
#include <vector> 
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <string>
#include <fstream>
#include <signal.h>
#include <stdlib.h>
#include <stdint.h>


// Mon Jan 17 05:37:44 EST 2022
// generated by /home/documents/cpp/scripts/cpputil -classhdr mjm_hier_two   
// g++  -Wall -std=gnu++11 -DTEST_MJM_HIER_TWO -I. -I../../mjm/hlib -I../../mjm/num  -gdwarf-3 -O0  -x c++ mjm_hier_two.h  -lpthread -lreadline

template <class Tr>
class mjm_hier_two 
{
 typedef mjm_hier_two Myt;
 typedef typename Tr::IdxTy IdxTy;
 typedef typename Tr::D D;
 typedef typename Tr::StrTy StrTy;
 typedef typename Tr::Ss Ss;
 typedef typename Tr::IsTy IsTy;
 typedef typename Tr::OsTy OsTy;
 typedef typename Tr::Ofs Ofs;
//typedef typename Tr::FlagTy; 
// typedef typename Tr::MyBlock  MyBlock;

typedef mjm_ragged_table Ragged;
typedef Ragged::Line Line;
typedef mjm_ragged_cursor RaggedCursor;

typedef mjm_blob<Tr> Blob;
typedef mjm_pawnoff<Tr> Hand;



typedef std::map<StrTy, std::map<StrTy, StrTy> > Hm;

// keep redundant key, preserve all orders and dups 
typedef std::vector < std::map<StrTy, std::map<StrTy, std::vector< StrTy > > > >  HmOrd;


public:
typedef Hm hier_map;
typedef HmOrd hier_map_ord;
mjm_hier_two() {}
~mjm_hier_two() {}


IdxTy organize( hier_map & hm,const StrTy & s, const StrTy & key,const IdxTy flags) 
{ return  Organize(  hm, s,  key, flags) ; }

IdxTy organize( hier_map & hm,const Ragged & r, const StrTy & key,const IdxTy flags) 
{ return  Organize(  hm, r,  key, flags) ; }


StrTy dump(const IdxTy flags=0) { return Dump(flags); }
private:
bool Bit(const IdxTy f, const IdxTy b) const  { return  ((f>>b)&1)!=0; }
// should loop over map now 
StrTy Dump(const IdxTy flags=0) {Ss ss;  return ss.str(); }
typedef typename mjm_thread_util<Tr>::mutex_vector MutexVector;

enum { MAP_MU=0 , MU_SZ};
mutable MutexVector m_mutex_vector;
void EnterSerial(const IdxTy i)const  {  m_mutex_vector.enter_serial(i ); }
void ExitSerial(const IdxTy i)const  {  m_mutex_vector.exit_serial(i ); }
//m_mutex_vector = MutexVector(MU_SZ);

IdxTy Organize( hier_map & hm,const StrTy & s, const StrTy & key,const IdxTy flags) 
{
Ragged r;
r.kvp_splitter(0);
//Ss ss; ss<<StrTy(b);
Ss ss(s); //  ss<<StrTy(b);
r.load(ss,false);
return Organize(hm,r,key,flags);
}

IdxTy Organize( hier_map & hm,const Ragged & r, const StrTy & key,const IdxTy flags) 
{
const IdxTy npos=2;
const IdxTy wpos=3;
const IdxTy vpos=1;
//MM_ERR(MMPR2(nm,r.size()))
MM_ERR(MMPR(r.size()))
//Hm hm;
MM_SZ_LOOP(i,r,szr)
{
const Ragged::Line & l=r[i];
const IdxTy len=l.size();
if(len<5) {continue; }
for (IdxTy j=3; j<(len-3); ++j)
{
//MM_ERR(MMPR2(nm,len))
//if ( l[j]=="meta")
if ( l[j]==key)
{
//MM_ERR(MMPR2(nm,l[j]))
hm[l[len-wpos]][l[len-npos]]=l[len-vpos];
//MM_ERR(MMPR4(nm,l[j],l[j-1],l[len-4])<<MMPR(l[len-1]))
MM_ERR(MMPR3(l[j],l[len-wpos],l[len-npos])<<MMPR(l[len-vpos]))

} // meta 

} // j 
} // i
return 0; 
} // Organize




// MEMBERS



}; // mjm_hier_two

//////////////////////////////////////////////

template <class Tr>
class mjm_hier_two_map : public std::map<typename Tr::StrTy, mjm_hier_two< Tr > >  
{
 typedef mjm_hier_two_map Myt;
typedef typename std::map<typename Tr::StrTy, mjm_hier_two< Tr> >   Super;
 typedef typename Tr::IdxTy IdxTy;
 typedef typename Tr::D D;
 typedef typename Tr::StrTy StrTy;
 typedef typename Tr::Ss Ss;
 typedef typename Tr::IsTy IsTy;
 typedef typename Tr::OsTy OsTy;
 typedef typename Tr::Ofs Ofs;
//typedef typename Tr::FlagTy; 
// typedef typename Tr::MyBlock  MyBlock;
public:
mjm_hier_two_map() {}
StrTy dump(const IdxTy flags=0) { return Dump(flags); }
private:
bool Bit(const IdxTy f, const IdxTy b) const  { return  ((f>>b)&1)!=0; }
// should loop over map now 
//StrTy Dump(const IdxTy flags=0) {Ss ss;  return ss.str(); }
typedef typename mjm_thread_util<Tr>::mutex_vector MutexVector;

enum { MAP_MU=0 , MU_SZ};
mutable MutexVector m_mutex_vector;
void EnterSerial(const IdxTy i)const  {  m_mutex_vector.enter_serial(i ); }
void ExitSerial(const IdxTy i)const  {  m_mutex_vector.exit_serial(i ); }
//m_mutex_vector = MutexVector(MU_SZ);


//StrTy dump(const IdxTy flags=0) { return Dump(flags); }

private:

void Init()
{
}

StrTy Dump(const IdxTy flags=0)
{
Ss ss;
MM_LOOP(ii,(*this))
{
ss<<(*ii).first<<CRLF;
ss<<(*ii).second.dump()<<CRLF;


}
return ss.str();
// return Dump(flags); 

}




private:

}; // mjm_hier_two_map




////////////////////////////////////////////
#ifdef  TEST_MJM_HIER_TWO
class Tr {
public:
// typedef mjm_string_picker Myt;
 typedef unsigned int IdxTy;
 typedef double  D;
 typedef std::string StrTy;
 typedef std::stringstream Ss;
 typedef std::istream  IsTy;
 typedef std::ostream  OsTy;
 typedef std::ofstream  Ofs;
// typedef typename Tr::MyBlock  MyBlock;
}; // 


#include "mjm_instruments.h"
#include "mjm_cli_ui.h"
typedef Tr::StrTy StrTy;
typedef Tr::IdxTy IdxTy;

template <class Tt> class tester_ {
typedef tester_<Tt> Myt;
typedef mjm_cli_ui<Myt> Cli;
//typedef tester Myt;
//typedef mjm_cli_ui<Myt> Cli;
typedef std::map<StrTy, StrTy> LocalVar;

typedef CommandInterpretterParam Cip ;
typedef void (Myt:: * CmdFunc)(Cip &, LocalVar &  ) ;
typedef std::map<StrTy, CmdFunc> CmdMap;
typedef std::vector<StrTy> Choices;
//typedef void (Myt:: * CompleteFunc) ( Cli::list_type & choices,  const char * cmd, const char * frag);
typedef void (Myt:: * CompleteFunc) ( Choices & choices,  const char * cmd, const char * frag);
typedef std::map<StrTy, CompleteFunc> CompMap;

public:
 //void cli_cmd( Cli::list_type & choices,  const char * frag)
 void cli_cmd( Choices & choices,  const char * frag)
{
const IdxTy nfrag=strlen(frag);
MM_LOOP(ii,m_cmd_map)
{
const StrTy & v=(*ii).first;
if (strncmp(v.c_str(),frag,nfrag)==0)  choices.push_back(v);
}
}

 //void cli_param( Cli::list_type & choices,  const char * _cmd, const char * frag)
 void cli_param( Choices & choices,  const char * _cmd, const char * frag)
{
MM_ERR("cli_param"<<MMPR2(_cmd,frag))
//const StrTy cmd=CliTy::word(StrTy(_cmd),0);
//auto ii=m_comp_map.find(cmd);
//if ( ii!=m_comp_map.end()) ((this)->*(*ii).second)(choices,cmd.c_str(),frag);
}

CmdMap m_cmd_map;


 }; // tester_
typedef tester_< mjm_hier_two <Tr>  > tester;

typedef mjm_cli_ui<tester> Cli;


typedef Tr::Ss Ss;
void about()
{
Ss ss;
ss<<" MJM_HIER_TWO "<<__DATE__<<" "<<__TIME__<<CRLF;
MM_ERR(ss.str())

}

int main(int argc,char **args)
{
about();
typedef mjm_hier_two<Tr>  Myt;
//Myt x(argc,args);
Myt x;

//if (!x.done()) x.command_mode();
Cli cli;
tester tester;
CommandInterpretter li(&std::cin);
li.push(args,argc);
cli.set_target(tester);
cli.set_command_handler(&tester::cli_cmd);
cli.set_param_handler(&tester::cli_param);
cli.activate();
li.set_split(1,' ');
while (li.nextok())
{
const IdxTy sz=li.size();
if (sz<1) continue;
const StrTy cmd=li.word(0);
if (cmd=="") continue;
if (cmd=="about"){ about();  continue; } 
CommandInterpretterParam  cip(li);

if (cmd=="quit") break;
if (cmd=="dump") { MM_ERR(x.dump()) }
//else if (cmd=="load") { x.load(li.words(),1); }
//else if (cmd=="clear") { x.clear(); }

} // nextok

//if (!x.done()) x.command_mode();
return 0;
}

#endif // main

#endif // MJM_HIER_TWO_H__ 
