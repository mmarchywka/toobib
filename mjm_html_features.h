#ifndef MJM_HTML_FEATURES_H__
#define MJM_HTML_FEATURES_H__

#include "mjm_globals.h"
#include "mjm_thread_util.h"

#include "mjm_pawnoff.h"
#include "mjm_collections.h"
#include "mjm_wovdb.h"
#include "mjm_strings.h"
#include "testHTML.h"


#include <map> 
#include <vector> 
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <string>
#include <fstream>
#include <signal.h>
#include <stdlib.h>
#include <stdint.h>


// Sun Apr  3 13:33:24 EDT 2022
// generated by /home/documents/cpp/scripts/cpputil -classhdr mjm_html_features   
// g++  -Wall -std=gnu++11 -DTEST_MJM_HTML_FEATURES -I. -I../../mjm/hlib -I../../mjm/num  -gdwarf-3 -O0  -x c++ mjm_html_features.h  -o mjm_html_features.out -lpthread -lreadline

mjm_global_credits::credit __credit__mjm_html_features("mjm_html_features"
, "  ");

template <class Tr>
class mjm_html_features 
{
 typedef mjm_html_features Myt;
 typedef typename Tr::IdxTy IdxTy;
 typedef typename Tr::D D;
 typedef typename Tr::StrTy StrTy;
 typedef typename Tr::Ss Ss;
 typedef typename Tr::IsTy IsTy;
 typedef typename Tr::OsTy OsTy;
 typedef typename Tr::Ofs Ofs;


typedef mjm_pawnoff<Tr> Hand;
typedef typename Hand::blob Blob;
typedef mjm_ragged_table Ragged;
typedef Ragged::Line Line;
typedef Ragged::Word Word;
typedef mjm_ragged_cursor RaggedCursor;
typedef std::vector<Ragged> RagVec;


typedef mjm_wovdb<Tr,StrTy> Tdb;

typedef std::map<StrTy, StrTy> KVMap;
typedef std::map<StrTy, KVMap> ThingMap;




//typedef typename Tr::FlagTy; 
// typedef typename Tr::MyBlock  MyBlock;
public:
mjm_html_features() {}
~mjm_html_features() {}


IdxTy collect_scripts(const Ragged & r, const IdxTy flags=0) 
{ return CollectScripts(r,flags); } 

IdxTy ld_json_scripts(Ragged & r, const IdxTy flags) 
{ return  LdJsonScripts( r, flags) ; } 

StrTy dump(const IdxTy flags=0) { return Dump(flags); }
private:
bool Bit(const IdxTy f, const IdxTy b) const  { return  ((f>>b)&1)!=0; }
// should loop over map now 
StrTy Dump(const IdxTy flags=0) {Ss ss;  return ss.str(); }
typedef typename mjm_thread_util<Tr>::mutex_vector MutexVector;

enum { MAP_MU=0 , MU_SZ};
mutable MutexVector m_mutex_vector;
void EnterSerial(const IdxTy i)const  {  m_mutex_vector.enter_serial(i ); }
void ExitSerial(const IdxTy i)const  {  m_mutex_vector.exit_serial(i ); }
//m_mutex_vector = MutexVector(MU_SZ);

////////////////////////////////////////
/*
1 html 9 head 168 script 169 type 170 text = application/ld+json
1 html 9 head 168 script 171 (null) = {  "@context": "http://schema.org",  "@type": "Periodical",  "issn": "0009-2347",  "hasPart": {    "@id": "cen-20190614lnp2",    "@type": "PublicationVolume",    "volumeNumber": "0",    "datePublished": "20190619"  }}
1 html 9 head 172 script 173 type 174 text = text/javascript
1 html 9 head 172 script 175 src 176 text = /etc.clientlibs/clientlibs/granite/jquery.min.js
1 html 9 head 177 script 178 type 179 text = text/javascript
1 html 9 head 177 script 180 src 181 text = /etc.clientlibs/clientlibs/granite/utils.min.js
*/


/*
https://casetext.com/case/roe-v-wade?p=1&jxs=&sort=relevance&type=case&ssr=false&tab=keyword&q=roe%20wade
1 html 298 body 492 input 493 type 494 text = hidden
1 html 298 body 492 input 495 id 496 text = _doc-meta
1 html 298 body 492 input 497 value 498 text = {"slug":"roe-v-wade","citation":"410 U.S. 113","copyBtnCite":"410 U.S. 113, 93 S. Ct. 705 (1973)","decideDate":96508800000,"title":"Roe v. Wade","isDocketCitation":false,"type":"case","jurisdictionCode":"U.S.","citationSuffix":"(1973)"}



*/




IdxTy LdJsonScripts(Ragged & r, const IdxTy flags) 
{
MM_ERR(MMPR(m_things.size()))
MM_LOOP(ii,m_things)
{
auto jj=(*ii).second.find("type");
if (jj==(*ii).second.end()) continue;
MM_ERR(MMPR((*jj).second))
// https://core.ac.uk/reader/74394360
// 1 html 188 body 1411 script 1414 type 1415 text = application/json
const StrTy & foo=(*jj).second;
//if ((*jj).second!="application/ld+json") continue;
// they have idiosyncratic html but then funny json too.. 
// https://www.proquest.com/docview/2248552422/12335014?parentSessionId=zoAJxQkdJArShpajyaELc1t71zRp2wkllU4Qf%2B9idmg%3D&pq-origsite=primo&accountid=55036
// and it still does not work as their 'jaon" is not quite right... 
const bool odd_ones= (foo=="text/javascript");
const bool hidd= (foo=="hidden");
MM_ERR(MMPR3(odd_ones,hidd,foo))
if ((foo!="application/ld+json")&&(foo!="application/json")&&!odd_ones&&!hidd)  continue;
//if ((foo!="application/ld+json")&&(foo!="application/json"))  continue;
if (hidd)
{
auto kk=(*ii).second.find("id");
if(kk==(*ii).second.end()) continue;
const StrTy & x=(*kk).second;
MM_ERR(MMPR3(odd_ones,hidd,x))
if ( x!="_doc-meta") continue;
 kk=(*ii).second.find("value");
if(kk==(*ii).second.end()) continue;
Line y;
y.push_back((*kk).second);
r.add(y);
continue; 
} // hidd

jj=(*ii).second.find("");
if (jj==(*ii).second.end()) continue;
MM_ERR(MMPR((*jj).second))
Line x;
x.push_back((*jj).second);
r.add(x);

} // ii 
MM_ERR(MMPR(r.size()))
return 0; 
} // LdJsonScripts

IdxTy CollectScripts(const Ragged & r, const IdxTy flags) 
{
IdxTy rc=0;
MM_LOOP(ii,r)
{
const Line & l=(*ii);
{Ss ss; MM_LOOP(kk,l) { ss<<(*kk)<<"|"; } MM_ERR(MMPR(ss.str())) } 
const IdxTy len=l.size();
IdxTy off=0;
if (len>1){if (l[len-2]=="=") off=1; }  
const IdxTy loff=len-off;
if (loff<3 ) continue;
for(IdxTy i=1 ;i<(loff-1); ++i)
{
if (l[i]=="script") 
{
StrTy k=l[loff-2];
StrTy k2=l[loff-4];
MM_ERR(MMPR4(k,k2,l[i-1],l[len-1]))
if (k=="text") m_things[l[i-1]][k2]=l[len-1];
// (null) is not there in header version doh 
if (k=="") m_things[l[i-1]][""]=l[len-1];
break; 
} // if script
// casttext doh
if (l[i]=="input") 
{
StrTy k=l[loff-2];
StrTy k2=l[loff-4];
MM_ERR(MMPR4(k,k2,l[i-1],l[len-1]))
if (k=="text") m_things[l[i-1]][k2]=l[len-1];
// (null) is not there in header version doh 
if (k=="") m_things[l[i-1]][""]=l[len-1];
break; 
} // if script
// casttext doh




} // i 


} // ii

return rc;
} // CollectScripts 

// MEMBERS
ThingMap m_things;


}; // mjm_html_features

//////////////////////////////////////////////

template <class Tr>
class mjm_html_features_map : public std::map<typename Tr::StrTy, mjm_html_features< Tr > >  
{
 typedef mjm_html_features_map Myt;
typedef typename std::map<typename Tr::StrTy, mjm_html_features< Tr> >   Super;
 typedef typename Tr::IdxTy IdxTy;
 typedef typename Tr::D D;
 typedef typename Tr::StrTy StrTy;
 typedef typename Tr::Ss Ss;
 typedef typename Tr::IsTy IsTy;
 typedef typename Tr::OsTy OsTy;
 typedef typename Tr::Ofs Ofs;
//typedef typename Tr::FlagTy; 
// typedef typename Tr::MyBlock  MyBlock;
public:
mjm_html_features_map() {}
StrTy dump(const IdxTy flags=0) { return Dump(flags); }
private:
bool Bit(const IdxTy f, const IdxTy b) const  { return  ((f>>b)&1)!=0; }
// should loop over map now 
//StrTy Dump(const IdxTy flags=0) {Ss ss;  return ss.str(); }
typedef typename mjm_thread_util<Tr>::mutex_vector MutexVector;

enum { MAP_MU=0 , MU_SZ};
mutable MutexVector m_mutex_vector;
void EnterSerial(const IdxTy i)const  {  m_mutex_vector.enter_serial(i ); }
void ExitSerial(const IdxTy i)const  {  m_mutex_vector.exit_serial(i ); }
//m_mutex_vector = MutexVector(MU_SZ);


//StrTy dump(const IdxTy flags=0) { return Dump(flags); }

private:

void Init()
{
}

StrTy Dump(const IdxTy flags=0)
{
Ss ss;
MM_LOOP(ii,(*this))
{
ss<<(*ii).first<<CRLF;
ss<<(*ii).second.dump()<<CRLF;


}
return ss.str();
// return Dump(flags); 

}




private:

}; // mjm_html_features_map




////////////////////////////////////////////
#ifdef  TEST_MJM_HTML_FEATURES
class Tr {
public:
// typedef mjm_string_picker Myt;
 typedef unsigned int IdxTy;
 typedef double  D;
 typedef std::string StrTy;
 typedef std::stringstream Ss;
 typedef std::istream  IsTy;
 typedef std::ostream  OsTy;
 typedef std::ofstream  Ofs;
// typedef typename Tr::MyBlock  MyBlock;
}; // 


#include "mjm_instruments.h"
#include "mjm_cli_ui.h"
typedef Tr::StrTy StrTy;
typedef Tr::IdxTy IdxTy;

template <class Tt> class tester_ {
typedef tester_<Tt> Myt;
typedef mjm_cli_ui<Myt> Cli;
//typedef tester Myt;
//typedef mjm_cli_ui<Myt> Cli;
typedef std::map<StrTy, StrTy> LocalVar;

typedef CommandInterpretterParam Cip ;
typedef void (Myt:: * CmdFunc)(Cip &, LocalVar &  ) ;
typedef std::map<StrTy, CmdFunc> CmdMap;
typedef std::vector<StrTy> Choices;
//typedef void (Myt:: * CompleteFunc) ( Cli::list_type & choices,  const char * cmd, const char * frag);
typedef void (Myt:: * CompleteFunc) ( Choices & choices,  const char * cmd, const char * frag);
typedef std::map<StrTy, CompleteFunc> CompMap;

public:
 //void cli_cmd( Cli::list_type & choices,  const char * frag)
 void cli_cmd( Choices & choices,  const char * frag)
{
const IdxTy nfrag=strlen(frag);
MM_LOOP(ii,m_cmd_map)
{
const StrTy & v=(*ii).first;
if (strncmp(v.c_str(),frag,nfrag)==0)  choices.push_back(v);
}
}

 //void cli_param( Cli::list_type & choices,  const char * _cmd, const char * frag)
 void cli_param( Choices & choices,  const char * _cmd, const char * frag)
{
MM_ERR("cli_param"<<MMPR2(_cmd,frag))
//const StrTy cmd=CliTy::word(StrTy(_cmd),0);
//auto ii=m_comp_map.find(cmd);
//if ( ii!=m_comp_map.end()) ((this)->*(*ii).second)(choices,cmd.c_str(),frag);
}

CmdMap m_cmd_map;


 }; // tester_
typedef tester_< mjm_html_features <Tr>  > tester;

typedef mjm_cli_ui<tester> Cli;


typedef Tr::Ss Ss;
void about()
{
Ss ss;
ss<<" MJM_HTML_FEATURES "<<__DATE__<<" "<<__TIME__<<CRLF;
MM_ERR(ss.str())

}

int main(int argc,char **args)
{
about();
typedef mjm_html_features<Tr>  Myt;
//Myt x(argc,args);
Myt x;

//if (!x.done()) x.command_mode();
Cli cli;
tester tester;
CommandInterpretter li(&std::cin);
li.push(args,argc);
cli.set_target(tester);
cli.set_command_handler(&tester::cli_cmd);
cli.set_param_handler(&tester::cli_param);
cli.activate();
li.set_split(1,' ');
while (li.nextok())
{
const IdxTy sz=li.size();
if (sz<1) continue;
const StrTy cmd=li.word(0);
if (cmd=="") continue;
if (cmd=="about"){ about();  continue; } 
CommandInterpretterParam  cip(li);

if (cmd=="quit") break;
if (cmd=="dump") { MM_ERR(x.dump()) }
//else if (cmd=="load") { x.load(li.words(),1); }
//else if (cmd=="clear") { x.clear(); }

} // nextok

//if (!x.done()) x.command_mode();
return 0;
}

#endif // main

#endif // MJM_HTML_FEATURES_H__ 
