#ifndef MJM_WOVDB_H__
#define MJM_WOVDB_H__

#include "mjm_globals.h"
#include "mjm_thread_util.h"
#include "mjm_vv_map.h"

#include <map> 
#include <vector> 
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <string>
#include <fstream>
#include <signal.h>
#include <stdlib.h>
#include <stdint.h>


// Sun Jan  3 06:56:23 EST 2021
// generated by /home/documents/cpp/scripts/cpputil -classhdr mjm_wovdb   
// g++  -Wall -std=gnu++11 -DTEST_MJM_WOVDB -I. -I../../mjm/hlib -I../../mjm/num  -gdwarf-3 -O0  -x c++ mjm_wovdb.h  -lpthread -lreadline
/*

Write-only-vector that is indexed and with flags for del etc.


*/

//for(auto ii=m_wov_map.begin("name"); (ii); ii.next())
#define MM_WOV_KLOOP(x,y,z) for(auto x=y.begin(z); (x); x.next())
#define MM_WOV_LOOP(x,y,z) for(auto x=y.begin(z); (x); ++x)




template <class Tr,class _Tobj>
class mjm_wovdb 
{
 typedef mjm_wovdb Myt;
 typedef typename Tr::IdxTy IdxTy;
 typedef typename Tr::D D;
 typedef typename Tr::StrTy StrTy;
 typedef typename Tr::Ss Ss;
 typedef typename Tr::IsTy IsTy;
 typedef typename Tr::OsTy OsTy;
 typedef typename Tr::Ofs Ofs;
//typedef typename Tr::FlagTy; 
// typedef typename Tr::MyBlock  MyBlock;

//typedef StrTy Tobj;
typedef _Tobj Tobj;
typedef IdxTy Tidx;

typedef IdxTy Tflag;
typedef std::vector<Tobj> Tdata;
typedef typename Tdata::iterator iterator;
typedef typename Tdata::const_iterator const_iterator;


typedef std::vector<Tflag> Tflags;
typedef mjm_vv_map<Tr,StrTy,Tidx,Myt> Tsidx;
typedef mjm_vv_map<Tr,IdxTy,Tidx,Myt> Tiidx;
typedef std::map<StrTy,Tsidx> Tsidxs;
// this should be the same for indexes
public:
typedef  Tobj value_type;
typedef typename Tsidx::vector_type vector_type;
typedef typename Tsidx::iterator string_iterator;
mjm_wovdb() {}
~mjm_wovdb() {}
Tidx add(const Tobj & v) { m_data.push_back(v); return m_data.size()-1;  } 
value_type& operator[](const Tidx i) { return m_data[i]; }
//value_type& operator()(const Tidx i) { return m_data[i]; }
const value_type& operator[](const Tidx i) const  { return m_data[i]; }
IdxTy size() const { return m_data.size(); } 
IdxTy size(const StrTy & idx) const 
{ 
auto ii=m_sidxs.find(idx);
if (ii==m_sidxs.end()) return 0;
//MM_ERR(MMPR((*ii).second.size()))
return (*ii).second.size();
//auto jj= (*ii).second.find(k);
//return m_data.size(); 
} 
void re_index(const Myt & that ) { ReIndex(that); } 
// add the item i to index name with value k 
void index(const Tidx i, const StrTy & name, const StrTy &k)
{
m_sidxs[name].add(k,i); 
}
// return index iterators or a vector of hit indicies
//vector_type * find(const StrTy & n, const StrTy &k) { return m_sidxs[n][k]; } 
const vector_type * find(const StrTy & n, const StrTy &k) const
{ 
auto ii=m_sidxs.find(n);
if (ii==m_sidxs.end()) return 0;
//auto jj= (*ii).second.find(k);
//if (jj==(*ii).second.end()) return 0;
//return (*jj).second;
return (*ii).second[k];
//return m_sidxs[n][k]; 
} 
// make it const so user does not think he is updating original 
// return something - default ctor if not found 
const Tobj  find(const StrTy & n, const StrTy & k, const IdxTy i) const
{


}

typedef typename Tsidx::iter iter; // begin(const StrTy & n) 
typedef typename Tsidx::const_iter citer; // begin(const StrTy & n) 
iter begin(const StrTy & n) 
{ return m_sidxs[n].begin(*this); } 

citer begin(const StrTy & n)  const
{ 
const auto ii=m_sidxs.find(n);
if (ii!=m_sidxs.end()) return ((*ii).second).begin(*this);
return citer();
//return m_sidxs[n].begin(*this); 

} 
iterator begin() { return m_data.begin(); } 
const_iterator begin() const  { return m_data.begin(); } 
iterator end() { return m_data.end(); } 
const_iterator end() const  { return m_data.end(); } 

StrTy dump(const IdxTy flags=0) { return Dump(flags); }
private:
bool Bit(const IdxTy f, const IdxTy b) const  { return  ((f>>b)&1)!=0; }
// should loop over map now 
StrTy Dump(const IdxTy flags=0) {Ss ss;  return ss.str(); }
typedef typename mjm_thread_util<Tr>::mutex_vector MutexVector;

enum { MAP_MU=0 , MU_SZ};
mutable MutexVector m_mutex_vector;
void EnterSerial(const IdxTy i)const  {  m_mutex_vector.enter_serial(i ); }
void ExitSerial(const IdxTy i)const  {  m_mutex_vector.exit_serial(i ); }
//m_mutex_vector = MutexVector(MU_SZ);

void ReIndex(const Myt & that ) 
{ 
const IdxTy szthat=that.size();
const IdxTy sz=size();
MM_LOOP(ii,that.m_sidxs)
{
const StrTy &  nm=(*ii).first;
MM_LOOP(jj,(*ii).second)
{
const StrTy & k=(*jj).first;
MM_LOOP(kk,((*jj).second))
{
//(*(m_sidxs[nm][k])).push_back((*kk)+sz);
m_sidxs[nm].add(k,(*kk)+sz);
}

} // jj 

} // ii 

} // ReIndex 



// MEMBERS

Tdata m_data;
Tflags m_flags;
Tsidxs m_sidxs;
}; // mjm_wovdb

//////////////////////////////////////////////

template <class Tr, class _Tobj>
class mjm_wovdb_map : public std::map<typename Tr::StrTy, mjm_wovdb< Tr, _Tobj > >  
{
 typedef mjm_wovdb_map Myt;
typedef typename std::map<typename Tr::StrTy, mjm_wovdb< Tr, _Tobj> >   Super;
 typedef typename Tr::IdxTy IdxTy;
 typedef typename Tr::D D;
 typedef typename Tr::StrTy StrTy;
 typedef typename Tr::Ss Ss;
 typedef typename Tr::IsTy IsTy;
 typedef typename Tr::OsTy OsTy;
 typedef typename Tr::Ofs Ofs;
//typedef typename Tr::FlagTy; 
// typedef typename Tr::MyBlock  MyBlock;
public:
mjm_wovdb_map() {}
StrTy dump(const IdxTy flags=0) { return Dump(flags); }
private:
bool Bit(const IdxTy f, const IdxTy b) const  { return  ((f>>b)&1)!=0; }
// should loop over map now 
//StrTy Dump(const IdxTy flags=0) {Ss ss;  return ss.str(); }
typedef typename mjm_thread_util<Tr>::mutex_vector MutexVector;

enum { MAP_MU=0 , MU_SZ};
mutable MutexVector m_mutex_vector;
void EnterSerial(const IdxTy i)const  {  m_mutex_vector.enter_serial(i ); }
void ExitSerial(const IdxTy i)const  {  m_mutex_vector.exit_serial(i ); }
//m_mutex_vector = MutexVector(MU_SZ);


//StrTy dump(const IdxTy flags=0) { return Dump(flags); }

private:

void Init()
{
}

StrTy Dump(const IdxTy flags=0)
{
Ss ss;
MM_LOOP(ii,(*this))
{
ss<<(*ii).first<<CRLF;
ss<<(*ii).second.dump()<<CRLF;


}
return ss.str();
// return Dump(flags); 

}




private:

}; // mjm_wovdb_map




////////////////////////////////////////////
#ifdef  TEST_MJM_WOVDB
class Tr {
public:
// typedef mjm_string_picker Myt;
 typedef unsigned int IdxTy;
 typedef double  D;
 typedef std::string StrTy;
 typedef std::stringstream Ss;
 typedef std::istream  IsTy;
 typedef std::ostream  OsTy;
 typedef std::ofstream  Ofs;
// typedef typename Tr::MyBlock  MyBlock;
}; // 


#include "mjm_instruments.h"
#include "mjm_cli_ui.h"
typedef Tr::StrTy StrTy;
typedef Tr::IdxTy IdxTy;

template <class Tt> class tester_ {
typedef tester_<Tt> Myt;
typedef mjm_cli_ui<Myt> Cli;
//typedef tester Myt;
//typedef mjm_cli_ui<Myt> Cli;
typedef std::map<StrTy, StrTy> LocalVar;

typedef CommandInterpretterParam Cip ;
typedef void (Myt:: * CmdFunc)(Cip &, LocalVar &  ) ;
typedef std::map<StrTy, CmdFunc> CmdMap;
typedef std::vector<StrTy> Choices;
//typedef void (Myt:: * CompleteFunc) ( Cli::list_type & choices,  const char * cmd, const char * frag);
typedef void (Myt:: * CompleteFunc) ( Choices & choices,  const char * cmd, const char * frag);
typedef std::map<StrTy, CompleteFunc> CompMap;

public:
 //void cli_cmd( Cli::list_type & choices,  const char * frag)
 void cli_cmd( Choices & choices,  const char * frag)
{
const IdxTy nfrag=strlen(frag);
MM_LOOP(ii,m_cmd_map)
{
const StrTy & v=(*ii).first;
if (strncmp(v.c_str(),frag,nfrag)==0)  choices.push_back(v);
}
}

 //void cli_param( Cli::list_type & choices,  const char * _cmd, const char * frag)
 void cli_param( Choices & choices,  const char * _cmd, const char * frag)
{
MM_ERR("cli_param"<<MMPR2(_cmd,frag))
//const StrTy cmd=CliTy::word(StrTy(_cmd),0);
//auto ii=m_comp_map.find(cmd);
//if ( ii!=m_comp_map.end()) ((this)->*(*ii).second)(choices,cmd.c_str(),frag);
}

CmdMap m_cmd_map;


 }; // tester_
typedef tester_< mjm_wovdb <Tr>  > tester;

typedef mjm_cli_ui<tester> Cli;


typedef Tr::Ss Ss;
void about()
{
Ss ss;
ss<<" MJM_WOVDB "<<__DATE__<<" "<<__TIME__<<CRLF;
MM_ERR(ss.str())

}

int main(int argc,char **args)
{
about();
typedef mjm_wovdb<Tr>  Myt;
//Myt x(argc,args);
Myt x;

//if (!x.done()) x.command_mode();
Cli cli;
tester tester;
CommandInterpretter li(&std::cin);
li.push(args,argc);
cli.set_target(tester);
cli.set_command_handler(&tester::cli_cmd);
cli.set_param_handler(&tester::cli_param);
cli.activate();
li.set_split(1,' ');
while (li.nextok())
{
const IdxTy sz=li.size();
if (sz<1) continue;
const StrTy cmd=li.word(0);
if (cmd=="") continue;
if (cmd=="about"){ about();  continue; } 
CommandInterpretterParam  cip(li);

if (cmd=="quit") break;
if (cmd=="dump") { MM_ERR(x.dump()) }
//else if (cmd=="load") { x.load(li.words(),1); }
//else if (cmd=="clear") { x.clear(); }

} // nextok

//if (!x.done()) x.command_mode();
return 0;
}

#endif // main

#endif // MJM_WOVDB_H__ 
