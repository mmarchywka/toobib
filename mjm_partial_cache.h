#ifndef MJM_PARTIAL_CACHE_H__
#define MJM_PARTIAL_CACHE_H__

#include "mjm_globals.h"
#include "mjm_thread_util.h"
#include "mjm_collections.h"

#include <map> 
#include <vector> 
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <string>
#include <fstream>
#include <signal.h>
#include <stdlib.h>
#include <stdint.h>


// Fri Nov 22 16:07:57 EST 2019
// generated by /home/documents/cpp/scripts/cpputil -classhdr mjm_partial_cache   
// g++ -std=gnu++11 -DTEST_MJM_PARTIAL_CACHE -I. -I../../mjm/hlib -I../../mjm/num  -gdwarf-3 -O0  -x c++ mjm_partial_cache.h  -lpthread -lreadline

template <class Tr>
class mjm_partial_cache 
{
 typedef mjm_partial_cache Myt;
 typedef typename Tr::IdxTy IdxTy;
 typedef typename Tr::D D;
 typedef typename Tr::StrTy StrTy;
 typedef typename Tr::Ss Ss;
 typedef typename Tr::IsTy IsTy;
 typedef typename Tr::OsTy OsTy;
 typedef typename Tr::Ofs Ofs;

typedef mjm_ragged_table Ragged;

typedef std::map<StrTy,StrTy> Map;
typedef std::map<StrTy,IdxTy> Index;
typedef std::vector<StrTy> V;
typedef std::map<StrTy,V> VMap;
// typedef typename Tr::MyBlock  MyBlock;
public:
mjm_partial_cache() {}
~mjm_partial_cache() {}
IdxTy load(const StrTy & fn ) { return Load(fn); } 
IdxTy save(const StrTy & fn ) { return Save(fn); } 
IdxTy cache_save(const StrTy &nm, const StrTy & k) { m_user[nm]=k; return 0;  } 
IdxTy cache_save(const StrTy &nm, const V & k) { return CacheSave(nm,k); } 
IdxTy cache_save(const char * nm, const V & k) { return CacheSave(nm,k); } 
IdxTy cache_save(const StrTy &nm, const Map & k) { return CacheSave(nm,k); } 
IdxTy cache_save(const char * nm, const Map & k) { return CacheSave(nm,k); } 
IdxTy cache_save(const char * nm, const VMap & k) { return CacheSave(nm,k); } 
IdxTy cache_save(const StrTy & nm, const VMap & k) { return CacheSave(nm,k); } 


IdxTy cache_load(StrTy & k, const StrTy &nm) { return CacheLoad(k,nm); } 
IdxTy cache_load(V & k, const StrTy &nm) { return CacheLoad(k,nm); } 
IdxTy cache_load(Map & k, const StrTy &nm) { return CacheLoad(k,nm); } 

StrTy dump(const IdxTy flags=0) { return Dump(flags); }

void clear() { Clear(); } 
private:
typedef typename mjm_thread_util<Tr>::mutex_vector MutexVector;
enum { MAP_MU=0 , MU_SZ};
mutable MutexVector m_mutex_vector;
void EnterSerial(const IdxTy i)const  {  m_mutex_vector.enter_serial(i ); }
void ExitSerial(const IdxTy i)const  {  m_mutex_vector.exit_serial(i ); }
//m_mutex_vector = MutexVector(MU_SZ);
bool Bit(const IdxTy f, const IdxTy b) const  { return  ((f>>b)&1)!=0; }
StrTy Dump(const IdxTy flags=0) {Ss ss;  return ss.str(); }
IdxTy CacheSave(const char * nm, const V & k) {  return CacheSave( StrTy(nm),k); } 
IdxTy CacheSave(const char * nm, const Map & k) {  return CacheSave( StrTy(nm),k); } 
IdxTy CacheSave(const StrTy &nm, const V & k) { 
const auto & fn=m_map.find(nm);
if ( fn==m_map.end()) return ~0; 
std::ofstream os(fn.c_str());
MM_LOOP(ii,k) { os<<(*ii); } 
return 0; 
} 
IdxTy CacheSave(const StrTy &nm, const Map & k) { 
const auto & fn=m_map.find(nm);
if ( fn==m_map.end()) return ~0; 
std::ofstream os(fn.c_str());
MM_LOOP(ii,k) { os<<(*ii).first<<" "<<(*ii).second; } 
return 0; 
} 
IdxTy CacheSave(const StrTy &nm, const VMap & k) { 
const auto & fn=m_map.find(nm);
if ( fn==m_map.end()) return ~0; 
std::ofstream os((*fn).second.c_str());
//MM_LOOP(ii,k) { os<<(*ii).first<<" "<<(*ii).second; } 
return 0; 
} 


IdxTy CacheLoad(StrTy & k, const StrTy &nm) { 
return 0; } 


IdxTy CacheLoad(V & k, const StrTy &nm) { 
return 0; } 

IdxTy CacheLoad(Map & k, const StrTy &nm) { 
return 0; } 

IdxTy Load(const StrTy & fn ) { 
// only load the configuration file
// until user requests something 
m_config.load(fn);
m_config.to_map(m_map,0);
const IdxTy sz=m_config.size();
for (IdxTy i=0; i<sz; ++i)
{
const Ragged::Line & l =m_config.line(i);
if (l.size()<1) continue;
m_index[l[0]]=i;


}
return 0;

 } 
IdxTy Save(const StrTy & fn ) 
{ 
// needs to write in a format compatible with reading. 

m_config.write_file(fn);
return 0; } 
void Clear()
{
m_config.clear();
m_map.clear();
m_index.clear();
m_user.clear();

}

Ragged m_config;
ReadWriteMap m_map;
Index m_index;
Map m_user;


}; // mjm_partial_cache

//////////////////////////////////////////////

template <class Tr>
class mjm_partial_cache_map : public std::map<typename Tr::StrTy, mjm_partial_cache< Tr > >  
{
 typedef mjm_partial_cache_map Myt;
typedef typename std::map<typename Tr::StrTy, mjm_partial_cache< Tr> >   Super;
 typedef typename Tr::IdxTy IdxTy;
 typedef typename Tr::D D;
 typedef typename Tr::StrTy StrTy;
 typedef typename Tr::Ss Ss;
 typedef typename Tr::IsTy IsTy;
 typedef typename Tr::OsTy OsTy;
 typedef typename Tr::Ofs Ofs;
// typedef typename Tr::MyBlock  MyBlock;
public:
mjm_partial_cache_map() {}
typedef typename mjm_thread_util<Tr>::mutex_vector MutexVector;

enum { MAP_MU=0 , MU_SZ};
mutable MutexVector m_mutex_vector;
void EnterSerial(const IdxTy i)const  {  m_mutex_vector.enter_serial(i ); }
void ExitSerial(const IdxTy i)const  {  m_mutex_vector.exit_serial(i ); }
//m_mutex_vector = MutexVector(MU_SZ);


StrTy dump(const IdxTy flags=0) { return Dump(flags); }

private:

void Init()
{
}

StrTy Dump(const IdxTy flags=0)
{
Ss ss;
MM_LOOP(ii,(*this))
{
ss<<(*ii).first<<CRLF;
ss<<(*ii).second.dump()<<CRLF;


}
return ss.str();
// return Dump(flags); 

}




private:

}; // mjm_partial_cache_map




////////////////////////////////////////////
#ifdef  TEST_MJM_PARTIAL_CACHE
class Tr {
public:
// typedef mjm_string_picker Myt;
 typedef unsigned int IdxTy;
 typedef double  D;
 typedef std::string StrTy;
 typedef std::stringstream Ss;
 typedef std::istream  IsTy;
 typedef std::ostream  OsTy;
 typedef std::ofstream  Ofs;
// typedef typename Tr::MyBlock  MyBlock;
}; // 


#include "mjm_instruments.h"
#include "mjm_cli_ui.h"
typedef Tr::StrTy StrTy;
typedef Tr::IdxTy IdxTy;

class tester {
typedef mjm_cli_ui<tester> Cli;
public:
 void cli_cmd( Cli::list_type & choices,  const char * frag)
{
/*const IdxTy nfrag=strlen(frag);
MM_LOOP(ii,m_cmd_map)
{
const StrTy & v=(*ii).first;
if (strncmp(v.c_str(),frag,nfrag)==0)  choices.push_back(v);
*/
}

 void cli_param( Cli::list_type & choices,  const char * _cmd, const char * frag)
{
MM_ERR("cli_param"<<MMPR2(_cmd,frag))
//const StrTy cmd=CliTy::word(StrTy(_cmd),0);
//auto ii=m_comp_map.find(cmd);
//if ( ii!=m_comp_map.end()) ((this)->*(*ii).second)(choices,cmd.c_str(),frag);
}

 }; // tester
typedef mjm_cli_ui<tester> Cli;


typedef Tr::Ss Ss;
void about()
{
Ss ss;
ss<<" MJM_PARTIAL_CACHE "<<__DATE__<<" "<<__TIME__<<CRLF;
MM_ERR(ss.str())

}

int main(int argc,char **args)
{
about();
typedef mjm_partial_cache<Tr>  Myt;
//Myt x(argc,args);
Myt x;

//if (!x.done()) x.command_mode();
Cli cli;
tester tester;
CommandInterpretter li(&std::cin);
li.push(args,argc);
cli.set_target(tester);
cli.set_command_handler(&tester::cli_cmd);
cli.set_param_handler(&tester::cli_param);
cli.activate();
li.set_split(1,' ');
while (li.nextok())
{
const IdxTy sz=li.size();
if (sz<1) continue;
const StrTy cmd=li.word(0);
if (cmd=="") continue;
if (cmd=="about"){ about();  continue; } 
CommandInterpretterParam  cip(li);
if (cmd=="quit") break;
if (cmd=="dump") { MM_ERR(x.dump()) }
//else if (cmd=="load") { x.load(li.words(),1); }
//else if (cmd=="clear") { x.clear(); }

} // nextok

//if (!x.done()) x.command_mode();
return 0;
}

#endif // main

#endif // MJM_PARTIAL_CACHE_H__ 
